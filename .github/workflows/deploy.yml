name: Build and deploy

on:
  push:
    branches:
      - main

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: ${{ secrets.GCP_SERVICE_NAME }}
  DOCKER_IMAGE: asia.gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ secrets.GCP_SERVICE_NAME }}

jobs:
  deploy:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      id-token: write

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    
    - id: auth
      name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v0
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}
    
    - name: Set up Google Cloud SDK
      uses: google-github-actions/setup-gcloud@v0

    - name: Set up zone GCP
      run: gcloud config set compute/zone ${{ secrets.GCP_REGION }}

    - name: Authorize docker
      run: gcloud auth configure-docker
    
    - name: Build and push to GCR
      run: |-
        docker build -t $DOCKER_IMAGE:$GITHUB_SHA -t $DOCKER_IMAGE:latest .
        docker push $DOCKER_IMAGE:$GITHUB_SHA
        docker push $DOCKER_IMAGE:latest

    - name: Stop and remove existed container
      continue-on-error: true
      run: gcloud compute ssh $SERVICE_NAME --command="docker stop $SERVICE_NAME && docker rm $SERVICE_NAME"

    - name: Cleanup docker
      run: gcloud compute ssh $SERVICE_NAME --command="docker system prune -f -a"

    - name: Create .env file
      run: |-
        touch .env
        echo "HOST=${{ secrets.HOST }}" >> .env
        echo "PORT=${{ secrets.PORT }}" >> .env
        echo "SESSION_COOKIE_SECRET=${{ secrets.SESSION_COOKIE_SECRET }}" >> .env
        echo "SESSION_COOKIE_TTL=${{ secrets.SESSION_COOKIE_TTL }}" >> .env
        echo "DB_URI=${{ secrets.DB_URI }}" >> .env
        echo "DB_USERNAME=${{ secrets.DB_USERNAME }}" >> .env
        echo "DB_PASSWORD=${{ secrets.DB_PASSWORD}}" >> .env
        echo "DB_NAME=${{ secrets.DB_NAME }}" >> .env
        echo "REDIS_HOST=${{ secrets.REDIS_HOST }}" >> .env
        echo "REDIS_PORT=${{ secrets.REDIS_PORT }}" >> .env
        echo "STEAM_OPENID_IDENTIFIER=${{ secrets.STEAM_OPENID_IDENTIFIER }}" >> .env
        echo "STEAM_OPENID_REALM=${{ secrets.STEAM_OPENID_REALM }}" >> .env
        echo "STEAM_OPENID_RETURN_URL=${{ secrets.STEAM_OPENID_RETURN_URL }}" >> .env
        echo "STEAM_API_URL=${{ secrets.STEAM_API_URL }}" >> .env
        echo "STEAM_API_KEY=${{ secrets.STEAM_API_KEY }}" >> .env
        echo "ETOP_API_URL=${{ secrets.ETOP_API_URL }}" >> .env
        echo "ETOP_EMAIL=${{ secrets.ETOP_EMAIL }}" >> .env
        echo "ETOP_PASSWORD=${{ secrets.ETOP_PASSWORD }}" >> .env
        echo "ETOP_APP_ID=${{ secrets.ETOP_APP_ID }}" >> .env
        echo "ETOP_HOT_VERSION=${{ secrets.ETOP_HOT_VERSION }}" >> .env

    - name: Transfer .env file to GCE
      run: gcloud compute scp .env $SERVICE_NAME:~
    
    - name: Set access token environment variable
      run: echo "GCP_ACCESS_TOKEN=$(gcloud auth print-access-token)" >> $GITHUB_ENV

    - name: Authorize docker inside GCE
      run: gcloud compute ssh $SERVICE_NAME --command="docker login -u oauth2accesstoken -p $GCP_ACCESS_TOKEN https://asia.gcr.io"
    
    - name: Pull docker image and deploy container
      run: gcloud compute ssh $SERVICE_NAME --command="docker pull $DOCKER_IMAGE:$GITHUB_SHA && docker run -d --name=$SERVICE_NAME --expose=${{ secrets.PORT }} --restart=always --env-file=/home/runner/.env --network=host $DOCKER_IMAGE:$GITHUB_SHA"

    - name: Remove .env file inside GCE
      run: gcloud compute ssh $SERVICE_NAME --command="rm -rf /home/runner/.env"